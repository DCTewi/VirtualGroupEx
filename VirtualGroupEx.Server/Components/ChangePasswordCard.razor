@inject NavigationManager NavigationManager
@inject CurrentUserService CurrentUser
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject JSInvokeService Js
@inject ILogger<ChangePasswordCard> Logger

@code
{
    public class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [StringLength(100, MinimumLength = 6)]
        public string OldPassword { get; set; }

        [Required]
        [DataType(DataType.Password)]
        [StringLength(100, MinimumLength = 6)]
        public string NewPassword { get; set; }

        [Compare("NewPassword")]
        [DataType(DataType.Password)]
        public string ConfirmNewPassword { get; set; }
    }

    private InputModel input;
    private bool actionError = false;
    private string actionErrorMessage;
    private ActionWaiter waiter = new ActionWaiter();


    protected override void OnInitialized()
    {
        input = new InputModel();
    }

    public async Task OnSubmitAsync()
    {
        if (waiter.CantInvoke) return;

        if (input.NewPassword != input.ConfirmNewPassword)
        {
            actionError = true;
            input = new InputModel();
            await Js.ResetButtonAsync();
            waiter.EndInvoke();
            return;
        }

        var result = await CurrentUser.ChangePasswordAsync(input.OldPassword, input.NewPassword);

        if (result.Succeeded)
        {
            Logger.LogInformation(
                $"IP[{CurrentUser.IPAddress}] User[{CurrentUser.Principal.Identity.Name}] password changed");
        }
        else
        {
            actionErrorMessage = string.Join("<br>", result.Errors.Select(e => e.Description).ToArray());
            actionError = true;
            input = new InputModel();
            await Js.ResetButtonAsync();
            waiter.EndInvoke();
            return;
        }

        input = new InputModel();
        waiter.EndInvoke();

        NavigationManager.NavigateTo("/logout", forceLoad: true);
    }
}

@if (actionError)
{
<div class="alert alert-danger alert-dismissible" role="alert">
    <button type="button" class="close" data-dismiss="alert">&times;</button>
    <strong>@localizer["msg.changepwFailed"]</strong> @((MarkupString)actionErrorMessage)
</div>
}

<h2>
    @localizer["user.changePassword"]
</h2>

<EditForm Model="input"
          OnValidSubmit="OnSubmitAsync">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <p class="form-group">
        <label>@localizer["user.oldPassword"]</label>
        <InputText @bind-Value="input.OldPassword" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() => input.OldPassword)"></ValidationMessage>
    </p>

    <p class="form-group">
        <label>@localizer["user.newPassword"]</label>
        <InputText @bind-Value="input.NewPassword" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() => input.NewPassword)"></ValidationMessage>
    </p>

    <p class="form-group">
        <label>@localizer["user.confirmPassword"]</label>
        <InputText @bind-Value="input.ConfirmNewPassword" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() => input.ConfirmNewPassword)"></ValidationMessage>
    </p>

    <button class="btn btn-outline-primary" type="submit"
            id="changePassBtn" onclick="setButtonBuzy('changePassBtn')">
        @localizer["operation.apply"]
    </button>

</EditForm>
