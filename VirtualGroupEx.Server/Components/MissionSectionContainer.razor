@inject MissionService MissionService
@inject JSInvokeService Js
@inject CurrentUserService CurrentUser 
@inject ILogger<MissionSectionContainer> Logger
 
@code 
{
    [Parameter] public MissionSection MissionSection { get; set; }
    [Parameter] public bool IsOperator { get; set; }
    [Parameter] public EventCallback<int> Remover { get; set; }
    [Parameter] public EventCallback Reloader { get; set; }

    public class InputModel
    {
        public class ValueWrapper
        {
            public int Value { get; set; }
        }

        public int MissionId { get; set; }

        [MaxLength(20)]
        public string Description { get; set; }

        public Dictionary<SkillPoint, ValueWrapper> Demands { get; set; }

        public InputModel(MissionSection section)
        {
            MissionId = section.MissionId;
            Demands = new Dictionary<SkillPoint, ValueWrapper>();

            foreach (var sp in (SkillPoint[])Enum.GetValues(typeof(SkillPoint)))
            {
                Demands.Add(sp, new ValueWrapper { Value = section.Demands.ContainsKey(sp) ? section.Demands[sp] : 0 });
            }
        }

        public MissionSection ToMissionSection()
        {
            var resultDemands = Demands
                .Where(kvp => kvp.Value.Value != 0)
                .ToDictionary(kvp => kvp.Key, kvp => kvp.Value.Value);

            return new MissionSection
            {
                MissionId = MissionId,
                Description = Description,
                Demands = resultDemands
            };
        }
    }

    private bool canJoin = false;
    private bool errorOnEdit = false;
    private MissionColumn editingColumn;
    private InputModel input;
    private ActionWaiter waiter = new ActionWaiter();
    private ISet<SkillPoint> demand = new HashSet<SkillPoint>();

    protected override void OnInitialized()
    {
        if (MissionSection.MissionColumns == null)
        {
            MissionSection = MissionService.GetSectionIncludingColumns(MissionSection.Id);
            MissionSection.MissionColumns.Sort((a, b) =>
            {
                if (a.SkillPoint == b.SkillPoint)
                {
                    return a.Id.CompareTo(b.Id);
                }
                else
                {
                    return a.SkillPoint.CompareTo(b.SkillPoint);
                }
            });

            canJoin = MissionSection.GetStatus() switch
            {
                MissionSectionStatus.Processing or MissionSectionStatus.Completed => false,
                _ => true
            };

            demand = MissionSection.GetDemandSet();
            demand.IntersectWith(CurrentUser.User.SkillPoints);

            canJoin &= demand.Count > 0;

            if (canJoin)
            {
                editingColumn = new MissionColumn
                {
                    MissionSectionId = MissionSection.Id,
                    UserId = CurrentUser.User.Id,
                    Status = MissionColumnStatus.Proccessing,
                    SkillPoint = demand.First(),
                };
            }

            if (IsOperator)
            {
                input = new(MissionSection);
            }
        }
    }

    private async Task ConfirmDeleteAsync()
    {
        if (waiter.CantInvoke) return;

        if (await Js.Confirm(localizer["operation.confirm"]))
        {
            await Remover.InvokeAsync(MissionSection.Id);
        }
    }

    private async Task TryJoinSectionAsync()
    {
        if (waiter.CantInvoke) return;

        await MissionService.TryAddColumnAsync(MissionSection.Id, editingColumn);
        await Reloader.InvokeAsync();

        waiter.EndInvoke();
    }

    private async Task UpdateMissionSectionAsync()
    {
        if (waiter.CantInvoke) return;

        errorOnEdit = false;
        var result = await MissionService.UpdateMissionSectionAsync(MissionSection.Id, input.ToMissionSection());

        if (result)
        {
            Logger.LogInformation($"User[{CurrentUser.User.UserName}] updated the mission section [{MissionSection.Id}]");
            await Reloader.InvokeAsync();
        }
        else
        {
            errorOnEdit = true;
            StateHasChanged();
        }

        waiter.EndInvoke();
    }
}


<div class="card card-body shadow-sm mt-2">
    <h5>
        <span class="oi oi-task"></span>
        @MissionSection.Description
        @if (IsOperator)
        {
            <button class="btn btn-outline-danger btn-sm float-right"
                    @onclick="@(async () => await ConfirmDeleteAsync())"
                    id="disRemBtnSec@(MissionSection.Id)" onmouseup="setButtonBuzy('disRemBtnSec@(MissionSection.Id)')">
                @localizer["operation.delete"]
            </button>
            <span class="h6 font-weight-normal">
                <ModalComponent ModalButtonText="@localizer["mission.section.edit"]" ModalButtonClass="float-right btn-sm mr-2">
                    <ModalTitle>
                        @localizer["mission.section.edit"]
                    </ModalTitle>
                    <ModalBody>
                        @if (errorOnEdit)
                        {
                            <div class="alert alert-danger" role="alert">
                                @localizer["msg.section.editerror"]
                            </div>
                        }
                        <EditForm Model="input" OnValidSubmit="UpdateMissionSectionAsync">
                            <DataAnnotationsValidator></DataAnnotationsValidator>
                            <p class="form-group">
                                <label>@localizer["mission.section.description"]</label>
                                <InputText @bind-Value="input.Description" class="form-control"></InputText>
                                <ValidationMessage For="@(() => input.Description)"></ValidationMessage>
                            </p>
                            @foreach (var kvp in input.Demands)
                            {
                            <p class="form-group">
                                <label>@localizer[$"sp.{kvp.Key}"]</label>
                                <InputNumber @bind-Value="input.Demands[kvp.Key].Value" class="form-control form-control-sm"></InputNumber>
                            </p>                        
                            }
                            <hr />
                            <button class="btn btn-outline-primary" type="submit"
                                    id="secAddBtn" onmouseup="setButtonBuzy('secAddBtn')">
                                @localizer["operation.submit"]
                            </button>
                        </EditForm>
                    </ModalBody>
                </ModalComponent>
            </span>
        }
        @if (demand.Count > 0)
        {
            <span class="h6 font-weight-normal">
                <ModalComponent ModalButtonText="@localizer["mission.section.join"]" ModalButtonClass="float-right btn-sm mr-2">
                    <ModalTitle>
                        @localizer["mission.section.join"]
                    </ModalTitle>
                    <ModalBody>
                        <EditForm Model="editingColumn" OnValidSubmit="TryJoinSectionAsync">
                            <DataAnnotationsValidator></DataAnnotationsValidator>
                            <p class="form-group">
                                <label class="mb-1">@localizer["dashboard.member.skillpoint"]</label> <br />
                                <InputRadioGroup @bind-Value="editingColumn.SkillPoint">
                                    @foreach (var sp in demand)
                                        {
                                        <div class="custom-control custom-radio custom-control-inline">
                                            <InputRadio Value="sp" class="custom-control-input" id="@($"sp{sp}")">
                                                @sp
                                            </InputRadio>
                                            <label class="custom-control-label" for="@($"sp{sp}")">@localizer[$"sp.{sp}"]</label>
                                        </div>
                                        }
                                </InputRadioGroup>
                                <ValidationMessage For="@(() => editingColumn.SkillPoint)"></ValidationMessage>
                            </p>

                            <p class="form-group">
                                <label>@localizer["mission.column.note"]</label>
                                <InputText @bind-Value="editingColumn.Note" class="form-control"></InputText>
                                <ValidationMessage For="@(() => editingColumn.Note)"></ValidationMessage>
                            </p>

                            <hr />
                            <button class="btn btn-outline-primary" type="submit"
                                    id="secJoinBtn" onmouseup="setButtonBuzy('secJoinBtn')">
                                @localizer["operation.submit"]
                            </button>
                        </EditForm>
                    </ModalBody>
                </ModalComponent>
            </span>
        }
    </h5>

    <table class="table table-striped mb-0">
        <thead>
            <tr class="d-flex">
                <th class="col-sm-1">
                    @localizer["dashboard.member.skillpoint"]
                </th>
                <th class="col-sm-3">
                    @localizer["user.username"]
                </th>
                <th class="col-sm-8">
                    @localizer["mission.column.note"]
                </th>
            </tr>
        </thead>
        <tbody>
            @if (MissionSection.Demands != null)
            {
                @foreach (var kv in MissionSection.Demands)
                {
                    var cols = MissionSection.MissionColumns?.Where(col => col.SkillPoint == kv.Key);
                    for (int i = 0; i < cols?.Count(); i++)
                    {
                        <MissionColumnContainer MissionColumn="cols.ElementAt(i)" Reloader="Reloader"></MissionColumnContainer>
                    }
                    for (int i = 0; i < kv.Value - cols?.Count(); i++)
                    {
                        <tr class="d-flex table-secondary">
                            <td class="col-sm-1">
                                @localizer[$"sp.{kv.Key}"]
                            </td>
                            <td class="col-sm-11">
                                @localizer["mission.column.status.Empty"]
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>

</div>
